CREATE TABLE CONCRETE
(  C_ID          NUMBER(10),
  CEMENT      NUMBER(20,4),
  SLAG	        NUMBER(20,4),
  ASH	        NUMBER(20,4),
  WATER	NUMBER(20,4),
  SUPERPLASTIC NUMBER(20,4),
  COARSEAGG	 NUMBER(20,4),
  FINEAGG	 NUMBER(20,4),
  AGE	         NUMBER(20,4),
  STRENGTH     NUMBER(20,4)  );


CREATE TABLE CONCRETE_TRAIN
AS
   SELECT *
     FROM CONCRETE
     WHERE C_ID < 931;


CREATE TABLE CONCRETE_TEST
AS
   SELECT *
     FROM CONCRETE
     WHERE C_ID >= 931;



CREATE TABLE SETTINGS_GLM
AS
SELECT *
  FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
  WHERE SETTING_NAME LIKE '%GLM%';

BEGIN

  INSERT INTO SETTINGS_GLM(SETTING_NAME, SETTING_VALUE)
    VALUES (DBMS_DATA_MINING.ALGO_NAME, DBMS_DATA_MINING.ALGO_NEURAL_NETWORK);
  
  INSERT INTO SETTINGS_GLM (SETTING_NAME, SETTING_VALUE)
    VALUES (DBMS_DATA_MINING.PREP_AUTO, DBMS_DATA_MINING.PREP_AUTO_ON);

END;
/


BEGIN
 DBMS_DATA_MINING.DROP_MODEL('MD_GLM_MODEL');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL(
      MODEL_NAME          => 'MD_GLM_MODEL',
      MINING_FUNCTION     => DBMS_DATA_MINING.REGRESSION,
      DATA_TABLE_NAME      => 'CONCRETE_TRAIN',
      CASE_ID_COLUMN_NAME => 'C_ID',
      TARGET_COLUMN_NAME => 'STRENGTH',
      SETTINGS_TABLE_NAME => 'SETTINGS_GLM');
END;
/



SELECT MODEL_NAME,
          ALGORITHM,
          MINING_FUNCTION
  FROM ALL_MINING_MODELS
  WHERE MODEL_NAME = 'MD_GLM_MODEL';
  
  
  
SELECT C_ID, STRENGTH 실제값, ROUND( PREDICTION(MD_GLM_MODEL USING *),2) 예측값
  FROM CONCRETE_TEST;
  
  
  
SELECT ROUND(CORR(PREDICTED_VALUE, STRENGTH),2) 상관관계
  FROM ( 
            SELECT C_ID, PREDICTION(MD_GLM_MODEL USING *) PREDICTED_VALUE,
                      PREDICTION_PROBABILITY(MD_GLM_MODEL USING * ) PROB, STRENGTH
              FROM CONCRETE_TEST
      );
      
      
DROP TABLE SETTINGS_GLM;

CREATE TABLE SETTINGS_GLM
AS
SELECT *
  FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
  WHERE SETTING_NAME LIKE '%GLM%';

BEGIN
  INSERT INTO SETTINGS_GLM(SETTING_NAME, SETTING_VALUE)
    VALUES (DBMS_DATA_MINING.ALGO_NAME, DBMS_DATA_MINING.ALGO_NEURAL_NETWORK);
  
  INSERT INTO SETTINGS_GLM (SETTING_NAME, SETTING_VALUE)
    VALUES (DBMS_DATA_MINING.PREP_AUTO, DBMS_DATA_MINING.PREP_AUTO_ON);

  INSERT INTO SETTINGS_GLM (SETTING_NAME, SETTING_VALUE)
    VALUES (DBMS_DATA_MINING.NNET_NODES_PER_LAYER, '100,100');

END;
/


BEGIN
  DBMS_DATA_MINING.DROP_MODEL('MD_GLM_MODEL');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL(
      MODEL_NAME          => 'MD_GLM_MODEL',
      MINING_FUNCTION     => DBMS_DATA_MINING.REGRESSION,
      DATA_TABLE_NAME     => 'CONCRETE_TRAIN',
      CASE_ID_COLUMN_NAME => 'C_ID',
      TARGET_COLUMN_NAME => 'STRENGTH',
      SETTINGS_TABLE_NAME => 'SETTINGS_GLM');
END;
/


SELECT C_ID, STRENGTH 실제값, ROUND( PREDICTION(MD_GLM_MODEL USING *),2) 예측값
  FROM CONCRETE_TEST;
  
  
SELECT ROUND(CORR(PREDICTED_VALUE, STRENGTH),2) 상관관계
  FROM ( 
           SELECT C_ID, PREDICTION(MD_GLM_MODEL USING *) PREDICTED_VALUE,
                     PREDICTION_PROBABILITY(MD_GLM_MODEL USING * ) PROB, STRENGTH
  FROM CONCRETE_TEST
      );


set serveroutput on
set verify off

accept p_cement prompt '시멘트의 총량을 입력하세요? 단위:kg (범위: 0~540) '
accept p_salg prompt '슬래그 시멘트의 총량을 입력하세요? 단위:kg (범위: 0~360) '
accept p_ash prompt '회분의 총량을 입력하세요? 단위:kg (예: 0~195) '
accept p_water prompt '물의 총량을 입력하세요? 단위:kg (예: 0~137) '
accept p_superplastic prompt '고성능 감수제의 총량을 입력하세요? 단위:kg (범위: 0~32) '
accept p_coarseagg prompt '굵은 자갈의 총량을 입력하세요? 단위:kg (예: 0~1125)'
accept p_fineagg prompt '잔 자갈의 총량을 입력하세요? 단위:kg (예: 0~594) '
accept p_age prompt '숙성 기간을 입력하세요? 단위: day (예: 0~ 365) '

declare  
   v_pred    varchar2(20);

begin 
with test_data as ( select  '&p_cement' CEMENT,
                                   '&p_salg' SLAG, 
                                   '&p_ash' ASH, 
                                   '&p_water' WATER,
                                   '&p_superplastic' SUPERPLASTIC,
                                   '&p_coarseagg' COARSEAGG,
                                   '&p_fineagg' FINEAGG,
                                   '&p_age' AGE 
                            from dual)
SELECT PREDICTION (MD_GLM_MODEL   USING *) into v_pred
  FROM test_data ;

 dbms_output.put_line('머신러닝이 예측한 콘크리트 강도는 ' || round(v_pred,2) || '입니다. 테스트 데이터의 최대 강도는 82.6 입니다');

end;
/


CREATE TABLE WISC_BC_DATA
( ID	                 NUMBER(10),
DIAGNOSIS	         VARCHAR2(5), 
RADIUS_MEAN	         NUMBER(20,7),
TEXTURE_MEAN	         NUMBER(20,7),
PERIMETER_MEAN	         NUMBER(20,7),
AREA_MEAN	         NUMBER(20,7),
SMOOTHNESS_MEAN      NUMBER(20,7),
COMPACTNESS_MEAN     NUMBER(20,7),
CONCAVITY_MEAN	         NUMBER(20,7),
POINTS_MEAN	         NUMBER(20,7),
SYMMETRY_MEAN	         NUMBER(20,7),
DIMENSION_MEAN	         NUMBER(20,7),
RADIUS_SE	         NUMBER(20,7),
TEXTURE_SE	         NUMBER(20,7),
PERIMETER_SE	         NUMBER(20,7),
AREA_SE	                      NUMBER(20,7),
SMOOTHNESS_SE	         NUMBER(20,7),
COMPACTNESS_SE	         NUMBER(20,7),
CONCAVITY_SE	         NUMBER(20,7),
POINTS_SE	         NUMBER(20,7),
SYMMETRY_SE	         NUMBER(20,7),
DIMENSION_SE	         NUMBER(20,7),
RADIUS_WORST	         NUMBER(20,7),
TEXTURE_WORST	         NUMBER(20,7),
PERIMETER_WORST	         NUMBER(20,7),
AREA_WORST	         NUMBER(20,7),
SMOOTHNESS_WORST	 NUMBER(20,7),
COMPACTNESS_WORST	 NUMBER(20,7),
CONCAVITY_WORST            NUMBER(20,7),
POINTS_WORST	         NUMBER(20,7),
SYMMETRY_WORST	         NUMBER(20,7),
DIMENSION_WORST          NUMBER(20,7) );

CREATE TABLE WISC_BC_DATA_TRAINING
AS
SELECT *
   FROM WISC_BC_DATA 
   WHERE ROWNUM < 501;

CREATE TABLE WISC_BC_DATA_TEST
AS
SELECT *
  FROM WISC_BC_DATA
MINUS
SELECT *
  FROM WISC_BC_DATA_TRAINING;


DROP TABLE DTSETTINGS;
CREATE TABLE DTSETTINGS
AS
SELECT *
  FROM TABLE (DBMS_DATA_MINING.GET_DEFAULT_SETTINGS)
   WHERE SETTING_NAME LIKE '%GLM%';

BEGIN

   INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.ALGO_NAME, 'ALGO_SUPPORT_VECTOR_MACHINES');

   INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.PREP_AUTO, 'ON');

   INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.SVMS_KERNEL_FUNCTION, 'SVMS_GAUSSIAN');

   COMMIT;
END;
/

BEGIN
  DBMS_DATA_MINING.DROP_MODEL('WC_MODEL');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL (
      MODEL_NAME            => 'WC_MODEL',
      MINING_FUNCTION       => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'WISC_BC_DATA_TRAINING',
      CASE_ID_COLUMN_NAME   => 'ID',
      TARGET_COLUMN_NAME    => 'DIAGNOSIS',
      SETTINGS_TABLE_NAME   => 'DTSETTINGS');
END;
/


DROP TABLE WC_DATA_TEST_MATRIX;
      
CREATE OR REPLACE VIEW VIEW_WISC_BC_DATA_TEST
AS
SELECT ID, DIAGNOSIS, 
          PREDICTION(WC_MODEL USING *) PREDICTED_VALUE,
          PREDICTION_PROBABILITY(WC_MODEL USING * ) PROBABILITY
 FROM WISC_BC_DATA_TEST;
 
 
SELECT ID 환자번호, DIAGNOSIS 실제값, PREDICTED_VALUE 예측값, PROBABILITY 예측확률
  FROM VIEW_WISC_BC_DATA_TEST
  WHERE  id in (87930, 91858, 92751, 842517, 845636);

SET  SERVEROUTPUT ON

DECLARE
   V_ACCURACY NUMBER;
BEGIN
   DBMS_DATA_MINING.COMPUTE_CONFUSION_MATRIX (
      ACCURACY => V_ACCURACY,
      APPLY_RESULT_TABLE_NAME => 'VIEW_WISC_BC_DATA_TEST',
      TARGET_TABLE_NAME => 'WISC_BC_DATA_TEST',
      CASE_ID_COLUMN_NAME => 'ID',
      TARGET_COLUMN_NAME => 'DIAGNOSIS',
      CONFUSION_MATRIX_TABLE_NAME => 'WC_DATA_TEST_MATRIX',
      SCORE_COLUMN_NAME => 'PREDICTED_VALUE',
      SCORE_CRITERION_COLUMN_NAME => 'PROBABILITY',
      COST_MATRIX_TABLE_NAME => NULL,
      APPLY_RESULT_SCHEMA_NAME => NULL,
      TARGET_SCHEMA_NAME => NULL,
      COST_MATRIX_SCHEMA_NAME => NULL,
      SCORE_CRITERION_TYPE => 'PROBABILITY');
   DBMS_OUTPUT.PUT_LINE('**** MODEL ACCURACY ****: ' || ROUND(V_ACCURACY,4));
END;
/


DROP TABLE DTSETTINGS;

CREATE TABLE DTSETTINGS
( SETTING_NAME    VARCHAR2 (200),
 SETTING_VALUE   VARCHAR2 (200) );

BEGIN

   INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.ALGO_NAME, 'ALGO_SUPPORT_VECTOR_MACHINES');

   INSERT INTO DTSETTINGS
      VALUES (DBMS_DATA_MINING.PREP_AUTO, 'ON');

   INSERT INTO DTSETTINGS
     VALUES (DBMS_DATA_MINING.SVMS_KERNEL_FUNCTION, 'SVMS_LINEAR');

COMMIT;
END;
/


BEGIN
  DBMS_DATA_MINING.DROP_MODEL('WC_MODEL');
END;
/

BEGIN
   DBMS_DATA_MINING.CREATE_MODEL (
      MODEL_NAME            => 'WC_MODEL',
      MINING_FUNCTION       => DBMS_DATA_MINING.CLASSIFICATION,
      DATA_TABLE_NAME       => 'WISC_BC_DATA_TRAINING',
      CASE_ID_COLUMN_NAME   => 'ID',
      TARGET_COLUMN_NAME    => 'DIAGNOSIS',
      SETTINGS_TABLE_NAME   => 'DTSETTINGS');
END;
/




DROP TABLE WC_DATA_TEST_MATRIX;
      
CREATE OR REPLACE VIEW   VIEW_WISC_BC_DATA_TEST
AS
SELECT ID, PREDICTION(WC_MODEL USING *) PREDICTED_VALUE,
          PREDICTION_PROBABILITY(WC_MODEL USING * ) PROBABILITY
  FROM WISC_BC_DATA_TEST;
  
set serveroutput on  
  
DECLARE
   V_ACCURACY NUMBER;
BEGIN
   DBMS_DATA_MINING.COMPUTE_CONFUSION_MATRIX (
      ACCURACY           => V_ACCURACY,
      APPLY_RESULT_TABLE_NAME => 'VIEW_WISC_BC_DATA_TEST',
      TARGET_TABLE_NAME       => 'WISC_BC_DATA_TEST',
      CASE_ID_COLUMN_NAME   => 'ID',
      TARGET_COLUMN_NAME   => 'DIAGNOSIS',
      CONFUSION_MATRIX_TABLE_NAME => 'WC_DATA_TEST_MATRIX',
      SCORE_COLUMN_NAME       => 'PREDICTED_VALUE',
      SCORE_CRITERION_COLUMN_NAME => 'PROBABILITY',
      COST_MATRIX_TABLE_NAME      => NULL,
      APPLY_RESULT_SCHEMA_NAME   => NULL,
      TARGET_SCHEMA_NAME       => NULL,
      COST_MATRIX_SCHEMA_NAME => NULL,
      SCORE_CRITERION_TYPE   => 'PROBABILITY');
   DBMS_OUTPUT.PUT_LINE('**** MODEL ACCURACY ****: ' || ROUND(V_ACCURACY,4));
END;
/



SET SERVEROUTPUT ON
SET VERIFY OFF

ACCEPT P_ID PROMPT '환자 번호를 입력하세요~ (예: 845636)'

DECLARE  
   V_PRED    VARCHAR2(20);
   V_PROB    NUMBER(10,2);

BEGIN

SELECT PREDICTION (WC_MODEL USING *),
          PREDICTION_PROBABILITY(WC_MODEL  USING * )  INTO V_PRED, V_PROB
  FROM WISC_BC_DATA_TEST
  WHERE ID = '&P_ID';

 IF V_PRED ='M' THEN 

   DBMS_OUTPUT.PUT_LINE('머신러닝이 예측한 결과: 유방암 환자입니다. 유방암일 확률은 ' || ROUND(V_PROB,2) * 100 || '%입니다');

 ELSE 
    DBMS_OUTPUT.PUT_LINE('머신러닝이 예측한 결과: 유방암 환자가 아닙니다. 유방암 환자가 아닐 확률은 ' || ROUND(V_PROB,2) * 100 || '%입니다');

 END IF;

END;
/
